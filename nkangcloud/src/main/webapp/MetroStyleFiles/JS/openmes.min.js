/*!
=====================================
OpenMes by SONHLAB.com - version 1.0
website: http://sonhlab.com
Documentation: http://docs.sonhlab.com/openmes-jquery-open-animation-messages/

build - 0070
=====================================
 */

(function(e) {
	var t = function(t, n) {
		function E(t) {
			function T(e) {
				p = false;
				y = e + 1;
				if (l !== undefined) {
					clearTimeout(l)
				}
				if (u != 0) {
					c[e] = setTimeout(function() {
						S(e)
					}, u)
				}
				if (y <= g) {
					E(y)
				}
			}
			if (h[i] == false) {
				if (t > 0) {
					h[i] = true
				}
			}
			var n;
			var s;
			var o;
			var u;
			var a;
			var f;
			var d;
			var v;
			var m;
			var x;
			b = e("#mes-window").find(".mes-container[data-mesid='" + i + "']")
					.find(".mes-content");
			n = b.eq(t).attr("data-show");
			if (n === undefined || n == "") {
				n = "none"
			}
			s = b.eq(t).attr("data-showdura");
			if (s === undefined || s == "") {
				s = 400
			}
			s = parseInt(s);
			o = b.eq(t).attr("data-showeasing");
			if (o === undefined || o == "") {
				o = "swing"
			}
			u = b.eq(t).attr("data-live");
			if (u === undefined || u == "") {
				u = 0
			}
			u = parseInt(u);
			a = b.eq(t).attr("data-delay");
			if (a === undefined || a == "") {
				a = 1
			}
			a = parseInt(a);
			if (n == "hmove") {
				if (p == false) {
					p = true;
					f = b.eq(t).attr("data-start");
					if (f === undefined || f == "") {
						f = 100
					}
					d = b.eq(t).attr("data-end");
					if (d === undefined || d == "") {
						d = 0
					}
					b.eq(t).css({
						display : "block",
						left : f + "%"
					});
					l = setTimeout(function() {
						b.eq(t).animate({
							left : d + "%"
						}, s, o, function() {
							T(t)
						})
					}, a)
				}
			} else if (n == "vmove") {
				if (p == false) {
					p = true;
					f = b.eq(t).attr("data-start");
					if (f === undefined || f == "") {
						f = 100
					}
					d = b.eq(t).attr("data-end");
					if (d === undefined || d == "") {
						d = 0
					}
					b.eq(t).css({
						display : "block",
						top : f + "%"
					});
					l = setTimeout(function() {
						b.eq(t).animate({
							top : d + "%"
						}, s, o, function() {
							T(t)
						})
					}, a)
				}
			} else if (n == "fade") {
				if (p == false) {
					p = true;
					l = setTimeout(function() {
						b.eq(t).fadeIn(s, o, function() {
							T(t)
						})
					}, a)
				}
			} else if (n == "typing") {
				if (p == false) {
					p = true;
					b.eq(t).find("span").addClass("mes-typingtext");
					var N = b.eq(t).find(".mes-typingtext").text();
					var C = 0;
					var k = r.typingspeed;
					b.eq(t).find(".mes-typingtext").text(" ");
					b.eq(t).css({
						display : "block"
					});
					l = setTimeout(function() {
						w = setInterval(function() {
							b.eq(t).find(".mes-typingtext").text(
									N.substring(0, C++) + "_");
							if (C > N.length) {
								b.eq(t).find(".mes-typingtext").text(
										b.eq(t).find(".mes-typingtext").text()
												.slice(0, -1));
								clearInterval(w);
								T(t)
							}
						}, k)
					}, a)
				}
			} else if (n == "hline") {
				if (p == false) {
					p = true;
					b.eq(t).find(".mes-hline").css({
						display : "block",
						opacity : 0
					});
					m = b.eq(t).find(".mes-hline").css("width");
					b.eq(t).css({
						display : "block"
					});
					b.eq(t).find(".mes-hline").css({
						width : "0px",
						opacity : 1
					});
					if (b.eq(t).attr("data-direction") == "left") {
						v = "-" + m
					} else {
						v = "0px"
					}
					b.eq(t).find(".mes-hline").css({
						left : "0px"
					});
					l = setTimeout(function() {
						b.eq(t).find(".mes-hline").animate({
							width : m,
							left : v
						}, s, o, function() {
							T(t)
						})
					}, a)
				}
			} else if (n == "vline") {
				if (p == false) {
					p = true;
					b.eq(t).find(".mes-vline").css({
						display : "block",
						opacity : 0
					});
					x = b.eq(t).find(".mes-vline").css("height");
					b.eq(t).css({
						display : "block"
					});
					b.eq(t).find(".mes-vline").css({
						height : "0px",
						opacity : 1
					});
					if (b.eq(t).attr("data-direction") == "top") {
						v = "-" + x
					} else {
						v = "0px"
					}
					b.eq(t).find(".mes-vline").css({
						top : "0px"
					});
					l = setTimeout(function() {
						b.eq(t).find(".mes-vline").animate({
							height : x,
							top : v
						}, s, o, function() {
							T(t)
						})
					}, a)
				}
			} else if (n == "none") {
				if (p == false) {
					p = true;
					b.eq(t).css({
						display : "block",
						opacity : 0
					});
					l = setTimeout(function() {
						b.eq(t).animate({
							opacity : 1
						}, 10, function() {
							T(t)
						})
					}, a)
				}
			} else {
				if (p == false) {
					p = true;
					b.eq(t).css({
						display : "block",
						visibility : "hidden"
					});
					l = setTimeout(function() {
						b.eq(t).css({
							visibility : "visible"
						});
						b.eq(t).addClass(n);
						b.eq(t).animate({
							opacity : 1
						}, 1e3, function() {
							e(this).removeClass(n);
							T(t)
						})
					}, a)
				}
			}
		}
		function S(t) {
			var n = [];
			n[t] = b.eq(t).attr("data-hide");
			if (n[t] === undefined || n[t] == "") {
				n[t] = "none"
			}
			$duration = b.eq(t).attr("data-hidedura");
			if ($duration === undefined || $duration == "") {
				$duration = 400
			}
			$duration = parseInt($duration);
			if (n[t] == "fade") {
				b.eq(t).fadeOut($duration, function() {
				})
			} else if (n[t] == "down") {
				b.eq(t).animate({
					top : v + "px"
				}, $duration, function() {
					e(this).css({
						display : "none"
					})
				})
			} else if (n[t] == "up") {
				b.eq(t).animate({
					top : "-" + v + "px"
				}, $duration, function() {
					e(this).css({
						display : "none"
					})
				})
			} else if (n[t] == "left") {
				b.eq(t).animate({
					left : "-" + d + "px"
				}, $duration, function() {
					e(this).css({
						display : "none"
					})
				})
			} else if (n[t] == "right") {
				b.eq(t).animate({
					left : d + "px"
				}, $duration, function() {
					e(this).css({
						display : "none"
					})
				})
			} else if (n[t] == "none") {
				b.eq(t).fadeOut(10, function() {
					if (c[t] !== undefined) {
						clearTimeout(c[t])
					}
				})
			} else {
				b.eq(t).addClass(n[t]);
				b.eq(t).animate({
					opacity : 0
				}, 1e3, function() {
					e(this).css({
						display : "none"
					});
					e(this).css("opacity", "");
					e(this).removeClass(n[t])
				})
			}
		}
		function x(t) {
			e("#mes-window").find(".mes-container[data-mesid='" + t + "']")
					.find(".mes-closebt").on(
							"click",
							function(n) {
								n.preventDefault();
								e("#mes-window").find(
										".mes-container[data-mesid='" + t
												+ "']").find(".mes-content")
										.finish();
								if (c.length > 0) {
									for (var r = 0; r < c.length; r++) {
										clearTimeout(c[r])
									}
								}
								if (l !== undefined) {
									clearTimeout(l)
								}
								if (w !== undefined) {
									clearInterval(w)
								}
								e("#mes-window").find(
										".mes-container[data-mesid='" + t
												+ "']").remove();
								e(".mes-active[data-mesid='" + t + "']")
										.removeClass("mes-active")
							})
		}
		function T(t) {
			e("#mes-window").find(".mes-container[data-mesid='" + t + "']")
					.find(".mes-replaybt").on(
							"click",
							function(n) {
								n.preventDefault();
								if (h[t] == true) {
									p = true;
									h[t] = false;
									e("#mes-window").find(
											".mes-container[data-mesid='" + t
													+ "']")
											.find(".mes-content").finish();
									if (c.length > 0) {
										for (var r = 0; r < c.length; r++) {
											clearTimeout(c[r])
										}
									}
									if (l !== undefined) {
										clearTimeout(l)
									}
									if (w !== undefined) {
										clearInterval(w)
									}
									e("#mes-window").find(
											".mes-container[data-mesid='" + t
													+ "']").remove();
									e("#mes-loadingholder").css({
										display : "block"
									});
									setTimeout(function() {
										N(t, u, a)
									}, 1e3)
								}
							})
		}
		function N(t, n, r) {
			p = false;
			if (e("#mes-station")
					.find(".mes-container[data-mesid='" + t + "']").length) {
				e("#mes-station")
						.find(".mes-container[data-mesid='" + t + "']").clone()
						.appendTo("#mes-window");
				e("#mes-window").find(".mes-container[data-mesid='" + t + "']")
						.css({
							display : "block"
						});
				m = e("#mes-window").find(
						".mes-container[data-mesid='" + t + "']").find(
						".mes-content").length;
				g = m - 1;
				E(0);
				x(t);
				T(t);
				e("#mes-loadingholder").css({
					display : "none"
				})
			} else {
				if (r == "dynamic") {
					s = "content/openmes/ajaxstation." + n;
					o = "mesid=" + t
				} else {
					s = "content/openmes/" + t + "." + n;
					o = ""
				}
				e.ajax({
					url : s,
					type : "POST",
					data : o,
					cache : false,
					success : function(n) {
						if (n) {
							e("#mes-station").append(n);
							e("#mes-station").find(
									".mes-container[data-mesid='" + t + "']")
									.clone().appendTo("#mes-window");
							e("#mes-window").find(
									".mes-container[data-mesid='" + t + "']")
									.css({
										display : "block"
									});
							m = e("#mes-window").find(
									".mes-container[data-mesid='" + t + "']")
									.find(".mes-content").length;
							g = m - 1;
							E(0);
							x(t);
							T(t);
							e("#mes-loadingholder").css({
								display : "none"
							})
						}
					},
					error : function(e) {
						alert("error!!!")
					}
				})
			}
		}
		function C(t) {
			if (l !== undefined) {
				clearTimeout(l)
			}
			t.addClass("mes-active");
			i = t.attr("data-mesid");
			u = t.attr("data-ext");
			if (u === undefined) {
				u = r.ext;
				a = "dynamic"
			} else {
				a = "static"
			}
			e("#mes-loadingholder").css({
				display : "block"
			});
			p = false;
			h[i] = false;
			N(i, u, a)
		}
		function L(e, t) {
			var n, t = t || 200;
			return function() {
				var r = this, i = arguments;
				clearTimeout(n);
				n = setTimeout(function() {
					e.apply(r, Array.prototype.slice.call(i))
				}, t)
			}
		}
		var r = e.extend({}, e.fn.openmes.defaults, n);
		var i;
		var s;
		var o;
		var u;
		var a;
		var f;
		var l;
		var c = [];
		var h = [];
		var p = false;
		var d = e(window).width();
		var v = e(window).height();
		var m;
		var g;
		var y;
		var b;
		var w;
		if (!e("body").find("#mes-station").length) {
			e("body").append("<div id='mes-station'></div>")
		}
		if (!e("body").find("#mes-window").length) {
			e("body").append("<div id='mes-window'></div>")
		}
		if (!e("#mes-loadingholder").length) {
			e("body")
					.append(
							"<div id='mes-loadingholder'><div id='mes-loadingicon'></div></div>")
		}
		f = e(t).attr("data-autorun");
		if (f > 0) {
			e(t).addClass("autorun");
			var k = setTimeout(function() {
				if (!e(t).hasClass("mes-active")) {
					C(e(t));
					e(t).removeClass("autorun")
				}
			}, f)
		}
		e(t).on(
				"click",
				function(n) {
					n.preventDefault();
					if (!e(this).hasClass("mes-active")
							&& !e(this).hasClass("autorun")) {
						C(e(t))
					}
				});
		e(window).resize(
				L(function() {
					var n = e(window).width();
					var r = e(window).height();
					if (d != n || v != r) {
						d = n;
						v = r;
						e("#mes-window").find(
								".mes-container[data-mesid='" + i + "']").find(
								".mes-content").finish();
						if (c.length > 0) {
							for (var s = 0; s < c.length; s++) {
								clearTimeout(c[s])
							}
						}
						if (l !== undefined) {
							clearTimeout(l)
						}
						if (w !== undefined) {
							clearInterval(w)
						}
						e("#mes-window").find(".mes-container").remove();
						e(t).removeClass("mes-active")
					}
				}))
	};
	e.fn.openmes = function(n) {
		return this.each(function(r, i) {
			if (e(this).data("openmes"))
				return e(this).data("openmes");
			var s = new t(this, n);
			e(this).data("openmes", s)
		})
	};
	e.fn.openmes.defaults = {
		ext : "php",
		typingspeed : 100
	}
})(jQuery)